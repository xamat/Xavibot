{"version":3,"sources":["GlobalState.js","config.js","MessageParser.js","ActionProvider.js","ChatbotContainer.js","App.js","index.js"],"names":["globalState","threadId","assistantId","setThreadId","id","this","setAssistantId","config","initialMessages","createChatBotMessage","React","createElement","dangerouslySetInnerHTML","__html","botName","customStyles","botMessageBox","backgroundColor","chatButton","state","gist","infoBox","widgets","MessageParser","constructor","actionProvider","getContext","parse","message","lowerCaseMessage","toLowerCase","includes","greet","handleHelp","sendMessageToAssistantBackend","ActionProvider","setStateFunc","createClientMessage","setState","sendMessageToBackend","bind","greetingMessage","updateChatbotState","helpMessage","handleUnknown","unknownMessage","userMessage","apiUrl","process","console","log","botMessage","axios","post","concat","data","addMessageToChat","error","chatMessage","prevState","messages","ChatbotContainer","useEffect","async","assistantResponse","threadResponse","initializeChatbot","Chatbot","headerText","messageParser","App","className","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7b4c2ba1.chunk.js","sourcesContent":["// globalState.js\nconst globalState = {\n    threadId: null,\n    assistantId: null,\n    setThreadId: function(id) { this.threadId = id; },\n    setAssistantId: function(id) { this.assistantId = id; }\n  };\n  \n  export default globalState;\n  ","// Config starter code\n  \n  import { createChatBotMessage } from 'react-chatbot-kit';\n  import React from 'react';\n\n  const config = {\n    initialMessages: [\n      createChatBotMessage(\n        <div \n        dangerouslySetInnerHTML={{ __html:`This is a chatbot designed to respond as Xavi Amatriain.<br> \n        <p>For more details on how this chatbot was created, read the <a href=\"https://amatria.in/blog/aidevelopment\" target=\"_blank\" rel=\"noopener noreferrer\">blogpost</a>.It provides\n        a link to the codebase in Github among other things.</p>\n        All that being said, how can I help you today, human? `\n         }}>\n      </div>\n      ),\n      \n    ],\n    // ... other config options\n    botName: 'XaviBot',\n    customStyles: {\n        botMessageBox: {\n          backgroundColor: '#376B7E',\n        },\n        chatButton: {\n          backgroundColor: '#5ccc9d',\n        },\n      },\n      state: {\n        gist: '',\n        infoBox: '',\n      },\n      widgets: [],\n  };\n\n  \n  export default config;\n  \n","// MessageParser.js\nimport globalState from './GlobalState';\n\nclass MessageParser {\n  \n  constructor(actionProvider, getContext) {\n    this.actionProvider = actionProvider;\n  }\n\n  parse(message) {\n    const threadId = globalState.threadId;\n    const assistantId = globalState.assistantId;\n\n    const lowerCaseMessage = message.toLowerCase();\n\n    if (lowerCaseMessage.includes(\"hello\")) {\n      this.actionProvider.greet();\n    } else if (lowerCaseMessage.includes(\"help\")) {\n      this.actionProvider.handleHelp();\n    } else {\n      // Send the message to the backend\n      //console.log('MessageParser calling ActionProvider with threaId',this.threadId);\n      //this.actionProvider.sendMessageToBackend(message);\n\n      //Use assistant instead\n      //console.log('MessageParser calling ActionProvider with threadId, assistantId: ', threadId, assistantId);\n      this.actionProvider.sendMessageToAssistantBackend(message, threadId, assistantId);\n      \n      //this.actionProvider.handleUnknown();\n    }\n  }\n}\nexport default MessageParser;\n\n ","//import React from 'react';\nimport axios from 'axios';\n\nclass ActionProvider {\n    constructor(createChatBotMessage, setStateFunc, createClientMessage) {\n      //console.log('Constructing Action Provider');\n      this.createChatBotMessage = createChatBotMessage;\n      this.setState = setStateFunc;\n      this.createClientMessage = createClientMessage;\n      this.sendMessageToBackend = this.sendMessageToBackend.bind(this);\n      this.sendMessageToAssistantBackend = this.sendMessageToAssistantBackend.bind(this);\n    }\n  \n    greet() {\n      const greetingMessage = this.createChatBotMessage(\"Hello! How can I help you?\");\n      this.updateChatbotState(greetingMessage);\n    }\n  \n    handleHelp() {\n      const helpMessage = this.createChatBotMessage(\"Here's some help...\");\n      this.updateChatbotState(helpMessage);\n    }\n  \n    handleUnknown() {\n      const unknownMessage = this.createChatBotMessage(\"Sorry, I didn't understand that.\");\n      this.updateChatbotState(unknownMessage);\n    }\n\n    async sendMessageToBackend(userMessage) {\n      const apiUrl = process.env.REACT_APP_API_URL;  \n      console.log('Calling server at:', apiUrl);\n      try {\n          const response = await axios.post(`${apiUrl}/chat`, { message: userMessage });\n          const botMessage = response.data.message;\n          \n          // Method to add the bot's response to the chat\n          this.addMessageToChat(botMessage);\n        } catch (error) {\n          console.error('Error sending message to backend:', error);\n          console.log('Error');\n          //this.handleUnknown();\n          // Handle the error (e.g., by displaying an error message in the chat)\n          \n          this.addMessageToChat(\"Caught Exception: Error sending message to backend\");\n        }\n      }\n\n      async sendMessageToAssistantBackend(userMessage, threadId, assistantId) {\n        console.log('Sending Message to Assistant Backend with threaId, assistantId:',threadId, assistantId);\n        \n        const apiUrl = process.env.REACT_APP_API_URL;\n        try {\n          const response = await axios.post(`${apiUrl}/chatWithAssistant`, { message: userMessage, threadId: threadId, assistantId: assistantId });\n          const botMessage = response.data.message;\n          \n          // Method to add the bot's response to the chat\n          this.addMessageToChat(botMessage);\n        } catch (error) {\n          console.error('Error sending message to backend:', error);\n          console.log('Error');\n          //this.handleUnknown();\n          // Handle the error (e.g., by displaying an error message in the chat)\n          \n          this.addMessageToChat(\"Caught Exception: Error sending message to backend\");\n        }\n      }\n    \n    \n      addMessageToChat(message) {\n        const chatMessage = this.createChatBotMessage(message);\n        this.updateChatbotState(chatMessage);\n      }\n  \n    updateChatbotState(message) {\n      this.setState(prevState => ({\n        ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n    }\n  }\n  \n  export default ActionProvider;\n ","import React, { useEffect } from 'react';\nimport globalState from './GlobalState.js';\nimport config from './config.js';\nimport MessageParser from './MessageParser.js';\nimport ActionProvider from './ActionProvider.js';\nimport Chatbot from 'react-chatbot-kit';\nimport axios from 'axios';\n\n  function ChatbotContainer() {\n    useEffect(() => {\n        const initializeChatbot = async () => {\n            try {\n                const apiUrl = process.env.REACT_APP_API_URL;\n\n                // Create Assistant and store its ID\n               // const assistantResponse = await axios.post(`${apiUrl}/create-assistant`);\n               // Instead of creating Assistant every time, just get last assistant created\n                const assistantResponse = await axios.post(`${apiUrl}/get-assistant`);\n                globalState.setAssistantId(assistantResponse.data);\n                console.log('Chatbot Initialized with AssistantId:',globalState.assistantId);\n                \n                // Create Thread and Update Global State\n                const threadResponse = await axios.post(`${apiUrl}/create-thread`);\n                globalState.setThreadId(threadResponse.data);\n                console.log('Chatbot Initialized with ThreadId:',globalState.threadId);\n            } catch (error) {\n                console.error('Error initializing chatbot:', error);\n            }\n        };\n        initializeChatbot();\n    }, []);\n\n    return (\n        <Chatbot\n            config={config}\n            headerText='Xavibot'\n            actionProvider={ActionProvider}\n            messageParser={MessageParser}\n        />\n    );\n  }\n  \n export default ChatbotContainer;","\nimport './App.css';\n\nimport 'react-chatbot-kit/build/main.css';\nimport React from 'react';\n\nimport ChatbotContainer from './ChatbotContainer';\n \nfunction App() {\n  console.log(\"APP is called\");\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ChatbotContainer />\n      </header>\n    </div>\n  ); \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}