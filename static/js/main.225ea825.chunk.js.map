{"version":3,"sources":["GlobalState.js","config.js","MessageParser.js","ActionProvider.js","ChatbotContainer.js","App.js","index.js"],"names":["globalState","threadId","assistantId","setThreadId","id","this","setAssistantId","config","initialMessages","createChatBotMessage","React","createElement","dangerouslySetInnerHTML","__html","botName","customStyles","botMessageBox","backgroundColor","chatButton","state","gist","infoBox","widgets","MessageParser","constructor","actionProvider","getContext","parse","message","lowerCaseMessage","toLowerCase","includes","handleHello","handleHelp","handleBackendSwitch","sendMessageToAssistantBackend","ActionProvider","setStateFunc","createClientMessage","idToken","setState","sendMessageToBackend","bind","addBotMessage","botMessage","updateChatbotState","greet","greetingMessage","helpMessage","backendType","console","log","response","axios","post","data","error","handleUnknown","unknownMessage","userMessage","apiUrl","process","threadResponse","threadError","addMessageToChat","chatMessage","prevState","messages","ChatbotContainer","isInitialized","setIsInitialized","useState","useEffect","async","get","assistantResponse","initializeChatbot","Chatbot","headerText","super","messageParser","App","className","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.225ea825.chunk.js","sourcesContent":["// globalState.js\nconst globalState = {\n    threadId: null,\n    assistantId: null,\n    setThreadId: function(id) { this.threadId = id; },\n    setAssistantId: function(id) { this.assistantId = id; }\n  };\n  \n  export default globalState;\n  ","// Config starter code\n  \n  import { createChatBotMessage } from 'react-chatbot-kit';\n  import React from 'react';\n\n  const config = {\n    initialMessages: [\n      createChatBotMessage(\n        <div \n        dangerouslySetInnerHTML={{ __html:`This is a chatbot designed to respond as Xavi Amatriain.<br> \n        <p>For more details on how this chatbot was created, read the <a href=\"https://amatria.in/blog/aidevelopment\" target=\"_blank\" rel=\"noopener noreferrer\">blogpost</a>.It provides\n        a link to the codebase in Github among other things.</p>\n        <p>If you prefer to ask questions and listen to an audio overview, you should visit my \n        <a href=\"https://notebooklm.google.com/notebook/56e35827-04fd-4f93-8f7d-9eaab9bf3852?_gl=1*1ojl3rl*_ga*ODMwNTc0ODMuMTc0OTI3OTM0Mg..*_ga_W0LDH41ZCB*czE3NDkyNzkzNDIkbzEkZzAkdDE3NDkyNzkzNDIkajYwJGwwJGgw&pli=1\"\n        target=\"_blank\" rel=\"noopener noreferrer\">NotebookLM notebook</a>\n        </p>\n        <p><strong>Backend Switching:</strong> You can switch between AI backends during our conversation by typing \"/useOpenAI\" or \"/useGemini\". We use Gemini by default.</p>\n        All that being said, how can I help you today, human? `\n         }}>\n      </div>\n      ),\n      \n    ],\n    // ... other config options\n    botName: 'XaviBot',\n    customStyles: {\n        botMessageBox: {\n          backgroundColor: '#376B7E',\n        },\n        chatButton: {\n          backgroundColor: '#5ccc9d',\n        },\n      },\n      state: {\n        gist: '',\n        infoBox: '',\n      },\n      widgets: [],\n  };\n\n  \n  export default config;\n  \n","// MessageParser.js\n\nclass MessageParser {\n  \n  constructor(actionProvider, getContext) {\n    this.actionProvider = actionProvider;\n  }\n\n  parse(message) {\n    const lowerCaseMessage = message.toLowerCase();\n\n    if (lowerCaseMessage.includes(\"hello\")) {\n      this.actionProvider.handleHello();\n    } else if (lowerCaseMessage.includes(\"help\")) {\n      this.actionProvider.handleHelp();\n    } else if (lowerCaseMessage === \"/usegemini\") {\n      this.actionProvider.handleBackendSwitch(\"gemini\");\n    } else if (lowerCaseMessage === \"/useopenai\") {\n      this.actionProvider.handleBackendSwitch(\"openai\");\n    } else {\n      // Send the message to the assistant backend\n      this.actionProvider.sendMessageToAssistantBackend(message);\n    }\n  }\n}\nexport default MessageParser;\n\n ","//import React from 'react';\nimport axios from 'axios';\nimport globalState from './GlobalState.js';\n\nclass ActionProvider {\n    constructor(createChatBotMessage, setStateFunc, createClientMessage, idToken) {\n      this.createChatBotMessage = createChatBotMessage;\n      this.setState = setStateFunc;\n      this.createClientMessage = createClientMessage;\n      this.idToken = idToken;\n      this.threadId = null;\n      this.assistantId = null;\n      this.sendMessageToBackend = this.sendMessageToBackend.bind(this);\n      this.sendMessageToAssistantBackend = this.sendMessageToAssistantBackend.bind(this);\n    }\n  \n    setThreadId(threadId) {\n      this.threadId = threadId;\n    }\n\n    setAssistantId(assistantId) {\n      this.assistantId = assistantId;\n    }\n\n    addBotMessage(message) {\n      const botMessage = this.createChatBotMessage(message);\n      this.updateChatbotState(botMessage);\n    }\n  \n    greet() {\n      const greetingMessage = this.createChatBotMessage(\"Hello! How can I help you?\");\n      this.updateChatbotState(greetingMessage);\n    }\n  \n    handleHello() {\n      const greetingMessage = this.createChatBotMessage(\"Hello! How can I help you?\");\n      this.updateChatbotState(greetingMessage);\n    }\n  \n    handleHelp() {\n      const helpMessage = this.createChatBotMessage(\"Here's some help...\");\n      this.updateChatbotState(helpMessage);\n    }\n  \n    async handleBackendSwitch(backendType) {\n      const apiUrl = process.env.REACT_APP_API_URL;\n      try {\n        console.log('Switching to backend:', backendType);\n        \n        // Clear the old thread ID first\n        this.setThreadId(null);\n        \n        const response = await axios.post(`${apiUrl}/switch-backend`, { backendType });\n        this.addBotMessage(response.data.message);\n        \n        // Get the new thread ID and assistant ID from the response\n        if (response.data.threadId) {\n          this.setThreadId(response.data.threadId);\n          \n          // Also update the global state to keep it in sync\n          if (typeof globalState !== 'undefined') {\n            globalState.setThreadId(response.data.threadId);\n          }\n        }\n        \n        // Get the new assistant ID from the response\n        if (response.data.assistantId) {\n          this.setAssistantId(response.data.assistantId);\n          \n          // Also update the global state to keep it in sync\n          if (typeof globalState !== 'undefined') {\n            globalState.setAssistantId(response.data.assistantId);\n          }\n        }\n        \n        // Add a confirmation message that the backend is ready\n        this.addBotMessage(`Backend switched to ${backendType}. You can now start chatting!`);\n      } catch (error) {\n        console.error('Error switching backend:', error);\n        this.addBotMessage('Sorry, I encountered an error while switching the backend.');\n      }\n    }\n\n    handleUnknown() {\n      const unknownMessage = this.createChatBotMessage(\"Sorry, I didn't understand that.\");\n      this.updateChatbotState(unknownMessage);\n    }\n\n    async sendMessageToBackend(userMessage) {\n      const apiUrl = process.env.REACT_APP_API_URL;  \n      \n      // Check if we have a valid thread ID\n      if (!this.threadId) {\n        try {\n          const threadResponse = await axios.post(`${apiUrl}/create-thread`);\n          this.setThreadId(threadResponse.data);\n          \n          // Also update the global state\n          globalState.setThreadId(threadResponse.data);\n        } catch (threadError) {\n          console.error('Error creating thread:', threadError);\n          this.addBotMessage('Error: Could not create a thread. Please try again.');\n          return;\n        }\n      }\n      \n      try {\n        const response = await axios.post(`${apiUrl}/chatWithAssistant`, {\n          message: userMessage,\n          threadId: this.threadId,\n          assistantId: this.assistantId\n        });\n        \n        if (response.data && response.data.message) {\n          this.addBotMessage(response.data.message);\n        } else {\n          this.addBotMessage('Sorry, I received an empty response from the server.');\n        }\n      } catch (error) {\n        console.error('Error communicating with backend:', error);\n        this.addBotMessage('Sorry, I encountered an error while processing your message.');\n      }\n    }\n\n    async sendMessageToAssistantBackend(userMessage) {\n      const apiUrl = process.env.REACT_APP_API_URL;\n      \n      try {\n        const response = await axios.post(`${apiUrl}/chatWithAssistant`, {\n          message: userMessage,\n          threadId: this.threadId,\n          assistantId: this.assistantId\n        });\n        \n        if (response.data && response.data.message) {\n          this.addBotMessage(response.data.message);\n        } else {\n          this.addBotMessage('Sorry, I received an empty response from the server.');\n        }\n      } catch (error) {\n        console.error('Error communicating with assistant backend:', error);\n        this.addBotMessage('Sorry, I encountered an error while processing your message.');\n      }\n    }\n    \n    addMessageToChat(message) {\n      const chatMessage = this.createChatBotMessage(message);\n      this.updateChatbotState(chatMessage);\n    }\n  \n    updateChatbotState(message) {\n      this.setState(prevState => ({\n        ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n    }\n  }\n  \n  export default ActionProvider;\n ","import React, { useEffect, useState } from 'react';\nimport globalState from './GlobalState.js';\nimport config from './config.js';\nimport MessageParser from './MessageParser.js';\nimport ActionProvider from './ActionProvider.js';\nimport Chatbot from 'react-chatbot-kit';\nimport axios from 'axios';\n\nfunction ChatbotContainer() {\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect(() => {\n    const initializeChatbot = async () => {\n      try {\n        const apiUrl = process.env.REACT_APP_API_URL;\n\n        // Pre-warm the backend to reduce first message latency\n        console.log('Pre-warming backend...');\n        await axios.get(`${apiUrl}/prewarm`);\n        console.log('Backend pre-warmed successfully');\n\n        // Create Assistant and store its ID\n        const assistantResponse = await axios.post(`${apiUrl}/get-assistant`);\n        globalState.setAssistantId(assistantResponse.data);\n        \n        // Create Thread and Update Global State\n        const threadResponse = await axios.post(`${apiUrl}/create-thread`);\n        globalState.setThreadId(threadResponse.data);\n        \n        setIsInitialized(true);\n      } catch (error) {\n        console.error('Error initializing chatbot:', error);\n      }\n    };\n    \n    initializeChatbot();\n  }, []);\n\n  // Create a custom ActionProvider class that doesn't require authentication\n  class CustomActionProvider extends ActionProvider {\n    constructor(createChatBotMessage, setStateFunc, createClientMessage) {\n      super(createChatBotMessage, setStateFunc, createClientMessage, null);\n      \n      // Set the thread and assistant IDs after initialization\n      this.setThreadId(globalState.threadId);\n      this.setAssistantId(globalState.assistantId);\n    }\n  }\n\n  if (!isInitialized) {\n    return <div>Initializing chatbot...</div>;\n  }\n\n  return (\n    <Chatbot\n      config={config}\n      headerText='Xavibot'\n      actionProvider={CustomActionProvider}\n      messageParser={MessageParser}\n    />\n  );\n}\n\nexport default ChatbotContainer;","import './App.css';\nimport 'react-chatbot-kit/build/main.css';\nimport React from 'react';\nimport ChatbotContainer from './ChatbotContainer';\n \nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ChatbotContainer />\n      </header>\n    </div>\n  ); \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}